from selenium import webdriver
from selenium.webdriver.chrome.options import Options as OptionsChrome
from selenium.webdriver.firefox.options import Options as OptionsFirefox
from time import sleep
from bs4 import BeautifulSoup
from pprint import PrettyPrinter as pprint
import requests
from auth import TELEGRAM_BOT_CHATID, TELEGRAM_BOT_TOKEN


class DdgObject():

    def __init__(self, url, job_filter="", browser="Firefox"):
        self.url = url
        self.job_filter = job_filter
        self.browser = browser
        self.html = self.getJavascriptRenderedSite()
        self.jobs_dict = self.scrapeJobsToDict()

    def setJobFilter(job_filter):
        self.job_filter = job_filter

    def getJavascriptRenderedSite(self):
        """
        Returns the html of the website passed as argument.
        Uses selenium for javascript dinamic sites.
        A sleep was added as the websites take some (small) time to load
        It users Firefox by default but Chrome was implemented as an option
        """
        if self.browser=="Firefox":
            options_firefox = OptionsFirefox()
            options_firefox.add_argument("--headless")
            driver = webdriver.Firefox(options=options_firefox)
        elif self.browser=="Chrome":
            options_chrome = OptionsChrome()
            options_chrome.add_argument("--headless")
            driver = webdriver.Chrome(options=options_chrome)
        else:
            print("Wrong browser selected, please use either 'Firefox' (default)" \
                    + " or 'Chrome' as arguments for this function")
            exit(1)
        driver.get(self.url)
        sleep(1)
        html = driver.page_source
        driver.quit()
        return html

    def scrapeJobsToDict(self):
        """
        Returns a Dictionary with the jobs as keys and the departments as values.
        Uses BeatifulSoup and takes the html as an argument, in this case,
        generated by Selenium in the function above
        """
        soup = BeautifulSoup(self.html, "html.parser")
        #print(soup.prettify())
        departments_selector = "h2[class*='openPositions_department']"
        departments = [department.get_text() for department
                       in soup.select(departments_selector)]

        jobs_selector = "h3[class*='openPositions_title']"
        jobs = [job.getText() for job
                in soup.select(jobs_selector)]

        jobs_dict = dict(zip(jobs, departments))
        return jobs_dict

    def printDict(self):
        """
        Prints the content of the dict in a human readable format
        """
        pp=pprint()
        print("'Job Title': 'Job Department'")
        print()
        pp.pprint(self.jobs_dict)

    def checkJobInDict(self):
        """
        Checks whether a string is contained within the keys values.
        Case unsensitive. Returns True or False
        """
        found = False
        for string in self.job_filter:
            if string in '\t'.join([key.lower() for key in self.jobs_dict.keys()]):
                found = True
                break
        return found

    def telegramBotSendtext(self):
        """
        Sends the text message passed as parameter to the telegram bot.
        Requires the Telegram credentials defined in auth.py (in .gitignore)
        Returns the response code
        """
        message="Duck Duck Go open vacancy found with desired filter!\n"
        message+="Full list of jobs:\n"
        message+="'Job Title' - 'Job Department'\n\n"
        for job, department in self.jobs_dict.items():
            message += f"{job} - {department}"
            message += "\n"

        params = {
                "chat_id": TELEGRAM_BOT_CHATID,
                "text": message,
                "parse_mode": "MARKDOWN",
                }
        url = "https://api.telegram.org/bot" + TELEGRAM_BOT_TOKEN + "/sendMessage"
        response = requests.get(url, params=params)
        response.raise_for_status()
        return response.json()

URL = "https://duckduckgo.com/hiring"
JOB_FILTER = ["cloud", "devops", "dev ops"]

ddg = DdgObject(URL, JOB_FILTER)
#ddg.printDict()

if ddg.checkJobInDict():
    ddg.telegramBotSendtext()
